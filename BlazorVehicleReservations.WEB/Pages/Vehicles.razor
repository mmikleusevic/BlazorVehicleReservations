@page "/vehicles"
@inject IToastPopup ToastPopup

<h3>Vehicles</h3>
<button type="submit" class="btn btn-primary" @onclick="@(() => ShowCreateModal())" style="margin:10px 10px">Create</button>
<button type="submit" class="btn btn-secondary" @onclick="ClearSearch" style="margin:10px 10px">Clear Search</button>
@if(editContext != null && vehicleSearch != null){
    <EditForm EditContext="@editContext" @oninput="ValidateVehicleSearch">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <table>
            <thead class="simple-form">
                <tr class="form-group">
                    <th class="col"><OnInputText Placeholder="Manufacturer" @bind-Value="vehicleSearch.Manufacturer" /></th>
                    <th class="col"><OnInputText Placeholder="Model" @bind-Value="vehicleSearch.Model" /></th>
                    <th class="col"><OnInputText Placeholder="Type" @bind-Value="vehicleSearch.Type" /></th>
                    <th class="col"><OnInputText Placeholder="Color" @bind-Value="vehicleSearch.Color" /></th>
                    <th class="col"><OnInputText Placeholder="Year" @bind-Value="vehicleSearch.Year" /></th>
                </tr>
            </thead>
        </table>
    </EditForm>
}

@if (vehicleList == null)
{
    <p>Loading...</p>
}
else if (vehicleList != null)
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th class="col">Manufacturer</th>
                <th class="col">Model</th>
                <th class="col">Type</th>
                <th class="col">Color</th>
                <th class="col">Year</th>
                <th class="col">Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var data in vehicleList)
            {
                <tr>
                    <td>@data.Manufacturer</td>
                    <td>@data.Model</td>
                    <td>@data.Type</td>
                    <td>@data.Color</td>
                    <td>@data.Year</td>
                    <td>
                        <button type="submit" class="btn btn-primary" @onclick="@(() => ShowVehicleModal(data.VehicleId.Value))"><i class="oi oi-eye"></i></button>
                        <button type="submit" class="btn btn-success" @onclick="@(() => ShowEditModal(data.VehicleId.Value))"><i class="oi oi-pencil"></i></button>
                        <button type="submit" class="btn btn-danger" @onclick="@(() => ShowDeleteModal(data.VehicleId.Value))"><i class="oi oi-trash"></i></button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No data</p>
}

@code {
    [Inject]
    private IVehicleService VehicleService { get; set; } = default!;

    [CascadingParameter] private IModalService Modal { get; set; } = default!;

    private List<VehicleDto> vehicleList { get; set; } = default!;

    private VehicleSearch vehicleSearch = new VehicleSearch();

    private EditContext editContext { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await ReturnAll();
        editContext = new EditContext(vehicleSearch);
    }

    protected async Task ShowEditModal(int vehicleId)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(VehicleDto.VehicleId), vehicleId);

        var formModal = Modal.Show<VehicleEditModal>("Edit vehicle", parameters);

        var result = await formModal.Result;

        if (!result.Cancelled)
        {
            await ReturnAll();
        }
    }

    protected async Task ShowDeleteModal(int vehicleId)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(VehicleDto.VehicleId), vehicleId);

        var formModal = Modal.Show<VehicleDeleteModal>("Delete vehicle", parameters);

        var result = await formModal.Result;

        if (!result.Cancelled)
        {
            await ReturnAll();
        }
    }

    protected async Task ShowCreateModal()
    {
        var formModal = Modal.Show<VehicleCreateModal>("Create vehicle");

        var result = await formModal.Result;

        if (!result.Cancelled)
        {
            await ReturnAll();
        }
    }

    protected void ShowVehicleModal(int vehicleId)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(VehicleDto.VehicleId), vehicleId);

        Modal.Show<VehicleShowModal>("Vehicle", parameters);
    }

    protected async Task ReturnAll()
    {
        vehicleList = await VehicleService.GetAllVehicles();
    }

    protected async Task ValidateVehicleSearch()
    {
        var result = editContext.Validate();
        if(result){
            vehicleList = await VehicleService.SearchVehicles(vehicleSearch);
        }
    }

    protected async Task ClearSearch()
    {
        vehicleSearch = new VehicleSearch();
        await ReturnAll();
    }
}
