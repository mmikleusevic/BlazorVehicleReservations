@page "/clients"
@inject IToastPopup ToastPopup

<h3>Clients</h3>

<button type="submit" class="btn btn-primary" @onclick="@(() => ShowCreateModal())" style="margin:10px 10px">Create</button>
<button type="submit" class="btn btn-secondary" @onclick="ClearSearch" style="margin:10px 10px">Clear Search</button>
@if (editContext != null && clientSearch != null)
{
    <EditForm EditContext="@editContext" @oninput="ValidateClientSearch">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <table class="table">
            <thead class="simple-form">
                <tr class="form-group">
                    <th class="col"><OnInputText Placeholder="First Name" @bind-Value="clientSearch.FirstName" /></th>
                    <th class="col"><OnInputText Placeholder="Last Name" @bind-Value="clientSearch.LastName" /></th>
                    <th class="col"><OnInputText Placeholder="Date of Birth" @bind-Value="clientSearch.Dob" /></th>
                    <th class="col"><OnInputText Placeholder="Gender" @bind-Value="clientSearch.Gender" /></th>
                    <th class="col"><OnInputText Placeholder="Country" @bind-Value="clientSearch.Country" /></th>
                </tr>
            </thead>
        </table>
    </EditForm>
}
@if (clientList == null)
{
    <p>Loading...</p>
}
else if (clientList != null)
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th class="col">First name</th>
                <th class="col">Last name</th>
                <th class="col">Dob</th>
                <th class="col">Gender</th>
                <th class="col">Country</th>
                <th class="col">Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var data in clientList)
            {
                <tr>
                    <td>@data.FName</td>
                    <td>@data.LName</td>
                    <td>@(data.Dob.HasValue ? @data.Dob.Value.ToShortDateString() : "")</td>
                    <td>@data.Gender</td>
                    <td>@data.Country</td>
                    <td>
                        <button type="submit" class="btn btn-primary" @onclick="@(() => ShowClientModal(data.ClientId.Value))"><i class="oi oi-eye"></i></button>
                        <button type="submit" class="btn btn-success" @onclick="@(() => ShowEditModal(data.ClientId.Value))"><i class="oi oi-pencil"></i></button>
                        <button type="submit" class="btn btn-danger" @onclick="@(() => ShowDeleteModal(data.ClientId.Value))"><i class="oi oi-trash"></i></button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No data</p>
}

@code {
    [Inject]
    private IClientService ClientService { get; set; } = default!;

    [CascadingParameter] private IModalService Modal { get; set; } = default!;

    private List<ClientDto> clientList { get; set; } = default!;

    private ClientSearch clientSearch = new ClientSearch();

    private EditContext editContext  { get; set; }

    protected override async Task OnInitializedAsync()
    {
        clientList = await ClientService.GetAllClients();
        editContext = new EditContext(clientSearch);
    }

    protected void ShowClientModal(int clientId)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(ClientDto.ClientId), clientId);

        Modal.Show<ClientShowModal>("Client", parameters);
    }

    protected async Task ShowEditModal(int clientId)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(ClientDto.ClientId), clientId);

        var formModal = Modal.Show<ClientEditModal>("Edit client", parameters);

        var result = await formModal.Result;

        if (!result.Cancelled)
        {
            clientList = await ClientService.GetAllClients();
        }
    }

    protected async Task ShowCreateModal()
    {
        var formModal = Modal.Show<ClientCreateModal>("Create client");

        var result = await formModal.Result;

        if (!result.Cancelled)
        {
            clientList = await ClientService.GetAllClients();
        }
    }

    protected async Task ShowDeleteModal(int clientId)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(ClientDto.ClientId), clientId);

        var formModal = Modal.Show<ClientDeleteModal>("Delete client", parameters);

        var result = await formModal.Result;

        if (!result.Cancelled)
        {
            clientList = await ClientService.GetAllClients();
        }
    }

    protected async Task ValidateClientSearch()
    {
        var result = editContext.Validate();
        if(result){
            clientList = await ClientService.SearchClient(clientSearch);
        }
    }

    protected async Task ClearSearch()
    {
        clientSearch = new ClientSearch();
        clientList = await ClientService.GetAllClients();
    }
}
