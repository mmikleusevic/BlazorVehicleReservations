@page "/"
@inject IToastPopup ToastPopup

<h3>Reservations</h3>

<button type="submit" class="btn btn-primary" @onclick="@(() => ShowCreateModal())" style="margin:10px 10px">Create</button>
<button type="submit" class="btn btn-secondary" @onclick="ClearSearch" style="margin:10px 10px">Clear Search</button>
<EditForm Model="@reservationSearch" @oninput="ReservationSearch">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <table>
        <thead class="simple-form">
            <tr class="form-group">
                <th class="col"><input placeholder="Reserved From" @bind-value="reservationSearch.ReservedFrom" @bind-value:event="oninput" type="text" class="form-control" id="reservedFrom" /></th>
                <th class="col"><input placeholder="Reserved Until" @bind-value="reservationSearch.ReservedUntil" @bind-value:event="oninput" type="text" class="form-control" id="reservedUntil" /></th>
                <th class="col"><input placeholder="First Name" @bind-value="reservationSearch.FirstName" @bind-value:event="oninput" type="text" class="form-control" id="firstName" /></th>
                <th class="col"><input placeholder="Last Name" @bind-value="reservationSearch.LastName" @bind-value:event="oninput" type="text" class="form-control" id="lastName" /></th>
                <th class="col"><input placeholder="Date of birth" @bind-value="reservationSearch.Dob" @bind-value:event="oninput" type="text" class="form-control" id="dob" /></th>
                <th class="col"><input placeholder="Gender" @bind-value="reservationSearch.Gender" @bind-value:event="oninput" type="text" class="form-control" id="gender" /></th>
                <th class="col"><input placeholder="Country" @bind-value="reservationSearch.Country" @bind-value:event="oninput" type="text" class="form-control" id="country" /></th>
                <th class="col"><input placeholder="Manufacturer" @bind-value="reservationSearch.Manufacturer" @bind-value:event="oninput" type="text" class="form-control" id="manufacturer" /></th>
                <th class="col"><input placeholder="Model" @bind-value="reservationSearch.Model" @bind-value:event="oninput" type="text" class="form-control" id="model" /></th>
                <th class="col"><input placeholder="Type" @bind-value="reservationSearch.Type" @bind-value:event="oninput" type="text" class="form-control" id="type" /></th>
                <th class="col"><input placeholder="Color" @bind-value="reservationSearch.Color" @bind-value:event="oninput" type="text" class="form-control" id="color" /></th>
                <th class="col"><input placeholder="Year" @bind-value="reservationSearch.Year" @bind-value:event="oninput" type="text" class="form-control" id="year" /></th>
            </tr>
        </thead>
    </table>   
</EditForm>
@if(messageResultList == null){
    <p>Loading...</p>
}
else if(messageResultList.Data != null)
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th class="col">Reserved from</th>
                <th class="col">Reserved until</th>
                <th class="col">First Name</th>
                <th class="col">Last Name</th>
                <th class="col">Dob</th>
                <th class="col">Gender</th>
                <th class="col">Country</th>
                <th class="col">Manufacturer</th>
                <th class="col">Model</th>
                <th class="col">Type</th>
                <th class="col">Color</th>
                <th class="col">Year</th>
                <th class="col">Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var data in messageResultList.Data)
            {
                <tr>
                    <td>@data.ReservedFrom.Value.ToShortDateString()</td>
                    <td>@data.ReservedUntil.Value.ToShortDateString()</td>
                    <td>@data.FirstName</td>
                    <td>@data.LastName</td>
                    <td>@data.Dob.Value.ToShortDateString()</td>
                    <td>@data.Gender</td>
                    <td>@data.Country</td>
                    <td>@data.Manufacturer</td>
                    <td>@data.Model</td>
                    <td>@data.Type</td>
                    <td>@data.Color</td>
                    <td>@data.Year</td>
                    <td>
                        <button type="submit" class="btn btn-primary" @onclick="@(() => ShowReservationModal(data.Id.Value))"><i class="oi oi-eye"></i></button>
                        <button type="submit" class="btn btn-success" @onclick="@(() => ShowEditModal(data.Id.Value))"><i class="oi oi-pencil"></i></button>
                        <button type="submit" class="btn btn-danger" @onclick="@(() => ShowDeleteModal(data.Id.Value))"><i class="oi oi-trash"></i></button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}else{
    <p>No data</p>
}

@code {
    [Inject]
    private IReservationService ReservationService { get; set; } = default!;

    [CascadingParameter] private IModalService Modal { get; set; } = default!;

    private MessageResult<List<ReservationDto>> messageResultList { get; set; } = default!;

    private ReservationSearch reservationSearch = new ReservationSearch();

    protected override async Task OnInitializedAsync()
    {
        await ReturnAll();
    }

    private async Task ShowEditModal(int id)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(ReservationDto.Id), id);

        var formModal = Modal.Show<ReservationEditModal>("Edit reservation", parameters);

        var result = await formModal.Result;

        if (!result.Cancelled)
        {
            await ReturnAll();
        }
    }

    private async Task ShowDeleteModal(int id)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(ReservationDto.Id), id);

        var formModal = Modal.Show<ReservationDeleteModal>("Delete reservation", parameters);

        var result = await formModal.Result;

        if (!result.Cancelled)
        {
            await ReturnAll();
        }
    }

    private async Task ShowCreateModal()
    {
        var formModal = Modal.Show<ReservationCreateModal>("Create reservation");

        var result = await formModal.Result;

        if (!result.Cancelled)
        {
            await ReturnAll();
        }
    }

    private void ShowReservationModal(int id)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(ReservationDto.Id), id);

        Modal.Show<ReservationShowModal>("Reservation", parameters);
    }

    private async Task ReturnAll()
    {
         messageResultList = await ReservationService.GetAllReservations();
        await ToastPopup.ReturnAppropriateMessageMain(messageResultList.Message, messageResultList.StatusCode);
    }

    private async Task ReservationSearch()
    {
        messageResultList = await ReservationService.SearchReservations(reservationSearch);
    }

    protected async Task ClearSearch()
    {
        reservationSearch = new ReservationSearch();
        await ReturnAll();
    }
}
