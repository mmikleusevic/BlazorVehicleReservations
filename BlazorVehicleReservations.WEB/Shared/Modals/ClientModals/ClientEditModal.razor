@inject IClientService ClientService

@if (client != null)
{
    <EditForm Model="@client" OnValidSubmit="SaveClient">
    <DataAnnotationsValidator />
    <ValidationSummary />
        <div class="simple-form">

            <div class="form-group">
                <label for="firstName">First Name</label>
                <input @bind="@client.FName" type="text" class="form-control" id="firstName"/>
            </div>

            <div class="form-group">
                <label for="lastName">Last Name</label>
                <input @bind="@client.LName" type="text" class="form-control" id="lastName" />
            </div>

            <div class="form-group">
                <label for="dob">Date Of Birth</label>
                <input @bind="@client.Dob" type="date" class="form-control" id="dob" />
            </div>

            <div class="form-group">
                <label for="gender">Gender</label>
                <input @bind="@client.Gender" type="text" class="form-control" id="gender" />
            </div>

            <div class="form-group">
                <label for="country">Country</label>
                <input @bind="@client.Country" type="text" class="form-control" id="country" />
            </div>

            <div class="buttonEdit">
                <button type="submit" class="btn btn-primary">Submit</button>
                <button @onclick="ModalInstance.CancelAsync" class="btn btn-secondary">Cancel</button>
            </div>
        </div>
    </EditForm>
}

@code {
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; } = default!;

    [Parameter] public int ClientId { get; set; }

    ClientDto client = new ClientDto();

    protected override async Task OnInitializedAsync()
    {
        client = await ClientService.GetClient(ClientId);
    }

    protected async Task SaveClient()
    {
        await ClientService.UpdateClient(client, ClientId);
        await ModalInstance.CloseAsync();
    }
}
