@inject IClientService ClientService

@if (messageResult.Data != null)
{
    <div class="simple-form">

        <div class="form-group">
            <label for="firstName">First Name</label>
            <input disabled="disabled" @bind="@messageResult.Data.FName" type="text" class="form-control" id="firstName"/>
        </div>

        <div class="form-group">
            <label for="lastName">Last Name</label>
            <input disabled="disabled" @bind="@messageResult.Data.LName" type="text" class="form-control" id="lastName"/>
        </div>

        <div class="form-group">
            <label for="dob">Date Of Birth</label>
            <input disabled="disabled" @bind="@messageResult.Data.Dob" type="date" class="form-control" id="dob"/>
        </div>

        <div class="form-group">
            <label for="gender">Gender</label>
            <input disabled="disabled" @bind="@messageResult.Data.Gender" type="text" class="form-control" id="gender"/>
        </div>

        <div class="form-group">
            <label for="country">Country</label>
            <input disabled="disabled" @bind="@messageResult.Data.Country" type="text" class="form-control" id="country"/>
        </div>
    </div>
}

@code {
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; } = default!;

    [Parameter] public int ClientId { get; set; }

    MessageResult<ClientDto> messageResult = new MessageResult<ClientDto>();

    protected override async Task OnInitializedAsync()
    {
        messageResult = await ClientService.GetClient(ClientId);
    }
}
